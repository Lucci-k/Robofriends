{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","Header","React","lazy","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","fallback","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","reponse","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","intialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7d92409e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({name, email, id}) => {\n\treturn (\n\t\t<div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React, {Fragment} from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn (\n\t\t<Fragment>\n\t \t{\n\t    \trobots.map((user, i) => {\n\t\t\t\treturn (<Card \n\t\t\t\tkey={i} \n\t\t\t\tid={robots[i].id} \n\t\t\t\tname={robots[i].name} \n\t\t\t\temail={robots[i].email}\n\t\t\t/>\n\t\t)\n\t})}\n    \t</Fragment>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots' \n\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflow: 'scroll', border: '5px solid black', height: '1200px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\tsuper(props);\n\tthis.state = {\n\t\thasError: false\n\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn<h1>Oooops. That is not good</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry","import React, {Component, Suspense} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css'\n\nimport {setSearchField, requestRobots} from '../actions';\n\n// import Header from '../components/Header';\n// built-in code splitting react lazy\nconst Header = React.lazy(() => import('../components/Header'));\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn isPending ?\n\t\t\t<h1>Loading...</h1> :\n\t\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t\t<Header />\n\t\t\t\t</Suspense>\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants.js'\n\nexport const setSearchField = (text) => ({\n    type: 'CHANGE_SEARCH_FIELD',\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING})\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n        .then(reponse => reponse.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants.js'\nimport { act } from 'react-dom/test-utils';\n\n\nconst intialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=intialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField:action.payload})\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<Provider store={store} >\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}